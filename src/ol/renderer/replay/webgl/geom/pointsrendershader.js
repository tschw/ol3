// This file is automatically generated, do not edit
goog.provide('ol.renderer.replay.webgl.geom.PointsRenderShader');
goog.require('ol.webgl.shader');
/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @param {WebGLRenderingContext} gl GL.
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderFragment = function(gl) {
  goog.base(this,
    ol.renderer.replay.webgl.geom.PointsRenderShader.sourcePreamble_(gl) + ol.renderer.replay.webgl.geom.PointsRenderShaderFragment.SOURCE);
};
goog.inherits(ol.renderer.replay.webgl.geom.PointsRenderShaderFragment, ol.webgl.shader.Fragment);
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderFragment.DEBUG_SOURCE =
    '//! NAMESPACE=ol.renderer.replay.webgl.geom.PointsRenderShader\n//! CLASS=ol.renderer.replay.webgl.geom.PointsRenderShader\n\n//! COMMON\n\n//! INCLUDE common_lib.glsl\n\n\nvec3 applyGamma(vec3 color, float reciprocalGamma) {\n    return pow(color, vec3(reciprocalGamma));\n}\n\nvec2 rotatedCw(vec2 p) {\n    return vec2(p.y, -p.x);\n}\n\nvec2 rotatedCcw(vec2 p) {\n    return vec2(-p.y, p.x);\n}\n\n// Machine epsilon is at ~0.6*10^-8 for a typical 32 bit ALU.\n// Usually we don\'t need the precision of the entire mantissa \n// but at some point the vector becomes rather useless.\n// Also, sometimes just error dirt creep up the low bits for\n// values that should yield zero.\nconst float NORM_EPS = 0.000000001;\n\nvec2 safeNormalized(vec2 v) {\n\n    float frob = dot(v, v);\n    return v * (frob > NORM_EPS ? inversesqrt(frob) : 0.0);\n}\n\nvec2 safeNormalized(vec2 v, vec2 fallback) {\n\n    float frob = dot(v, v);\n    return frob > NORM_EPS ? v * inversesqrt(frob) : fallback;\n}\n\nvec3 projected(vec4 p) {\n    return p.xyz / p.w;\n}\n\n\nvarying vec2 TexCoord;\nvarying float Opacity;\n\n\nvec3 decodeRGB(float v) {\n\n    const float downshift16 = 1. / 65536.;\n    const float downshift8  = 1. /   256.;\n\n    return vec3(v * downshift16, fract(v * downshift8), fract(v));\n}\n\nvec2 decodeUV(float v) {\n    const float downshift12 = 1. / 4096.;\n\n    return vec2(floor(v) * downshift12, fract(v));\n}\n\nvec2 decodeVec2I12(float v) {\n    const float upshift12 = 4096.;\n    const float offset = -2048.;\n\n    return vec2(floor(v) + offset, fract(v) * upshift12 + offset);\n}\n\nvec2 decodeVec2U12(float v) {\n    const float upshift12 = 4096.;\n\n    return vec2(floor(v), fract(v) * upshift12);\n}\n\nvec4 rteDecode(vec4 highPrecCoord, vec4 highPrecOffset) {\n\n    vec4 v = highPrecCoord + highPrecOffset;\n    v.xy += v.zw;\n    v.zw = vec2(0.0, 1.0);\n    return v;\n}\n\n\n//! FRAGMENT\n\nuniform float RcpGammaIn;\n\nuniform sampler2D Sampler0;\nuniform sampler2D Sampler1;\nuniform sampler2D Sampler2;\nuniform sampler2D Sampler3;\nuniform sampler2D Sampler4;\nuniform sampler2D Sampler5;\nuniform sampler2D Sampler6;\nuniform sampler2D Sampler7;\n\nvoid main(void) {\n\n  vec4 color = texture2D(Sampler0, TexCoord);\n  gl_FragColor = vec4(applyGamma(color.rgb, RcpGammaIn),\n                      sqrt(color.a * Opacity));\n}\n\n';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderFragment.OPTIMIZED_SOURCE =
    'vec3 r(vec3 p,float q){return pow(p,vec3(q));}const float o=1e-9;varying vec2 a;varying float b;uniform float f;uniform sampler2D g,h,i,j,k,l,m,n;void main(){vec4 p=texture2D(g,a);gl_FragColor=vec4(r(p.rgb,f),sqrt(p.a*b));}';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderFragment.SOURCE = goog.DEBUG ?
    ol.renderer.replay.webgl.geom.PointsRenderShaderFragment.DEBUG_SOURCE :
    ol.renderer.replay.webgl.geom.PointsRenderShaderFragment.OPTIMIZED_SOURCE;
/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @param {WebGLRenderingContext} gl GL.
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderVertex = function(gl) {
  goog.base(this,
    ol.renderer.replay.webgl.geom.PointsRenderShader.sourcePreamble_(gl) + ol.renderer.replay.webgl.geom.PointsRenderShaderVertex.SOURCE);
};
goog.inherits(ol.renderer.replay.webgl.geom.PointsRenderShaderVertex, ol.webgl.shader.Vertex);
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderVertex.DEBUG_SOURCE =
    '//! NAMESPACE=ol.renderer.replay.webgl.geom.PointsRenderShader\n//! CLASS=ol.renderer.replay.webgl.geom.PointsRenderShader\n\n//! COMMON\n\n//! INCLUDE common_lib.glsl\n\n\nvec3 applyGamma(vec3 color, float reciprocalGamma) {\n    return pow(color, vec3(reciprocalGamma));\n}\n\nvec2 rotatedCw(vec2 p) {\n    return vec2(p.y, -p.x);\n}\n\nvec2 rotatedCcw(vec2 p) {\n    return vec2(-p.y, p.x);\n}\n\n// Machine epsilon is at ~0.6*10^-8 for a typical 32 bit ALU.\n// Usually we don\'t need the precision of the entire mantissa \n// but at some point the vector becomes rather useless.\n// Also, sometimes just error dirt creep up the low bits for\n// values that should yield zero.\nconst float NORM_EPS = 0.000000001;\n\nvec2 safeNormalized(vec2 v) {\n\n    float frob = dot(v, v);\n    return v * (frob > NORM_EPS ? inversesqrt(frob) : 0.0);\n}\n\nvec2 safeNormalized(vec2 v, vec2 fallback) {\n\n    float frob = dot(v, v);\n    return frob > NORM_EPS ? v * inversesqrt(frob) : fallback;\n}\n\nvec3 projected(vec4 p) {\n    return p.xyz / p.w;\n}\n\n\nvarying vec2 TexCoord;\nvarying float Opacity;\n\n\n//! VERTEX\n\n//! INCLUDE gpudata_lib.glsl\nvec3 decodeRGB(float v) {\n\n    const float downshift16 = 1. / 65536.;\n    const float downshift8  = 1. /   256.;\n\n    return vec3(v * downshift16, fract(v * downshift8), fract(v));\n}\n\nvec2 decodeUV(float v) {\n    const float downshift12 = 1. / 4096.;\n\n    return vec2(floor(v) * downshift12, fract(v));\n}\n\nvec2 decodeVec2I12(float v) {\n    const float upshift12 = 4096.;\n    const float offset = -2048.;\n\n    return vec2(floor(v) + offset, fract(v) * upshift12 + offset);\n}\n\nvec2 decodeVec2U12(float v) {\n    const float upshift12 = 4096.;\n\n    return vec2(floor(v), fract(v) * upshift12);\n}\n\nvec4 rteDecode(vec4 highPrecCoord, vec4 highPrecOffset) {\n\n    vec4 v = highPrecCoord + highPrecOffset;\n    v.xy += v.zw;\n    v.zw = vec2(0.0, 1.0);\n    return v;\n}\n\n\n\nattribute vec4 Position;\nattribute vec4 Style;\n// extent (sign-adjusted per vertex)\n// anchorpoint\n// rotation\n// opacity\n\nattribute float AltExtent;\n\nattribute float EncTexPos;\n\nuniform vec4 Pretranslation;\nuniform mat4 Transform;\nuniform vec2 PixelScale;\n\nconst float TEXTURE_SCALE = 1. / 256.;\n\nvoid main(void) {\n\n    gl_Position = Transform * rteDecode(Position, Pretranslation);\n    vec2 extent = decodeVec2I12(AltExtent + Style.x);\n    vec2 anchor = decodeVec2I12(Style.y);\n\n    float angle = abs(Style.z) +\n        max(0., sign(Style.z)) * atan(Transform[0].y, Transform[0].x);\n    Opacity = Style.w;\n\n    vec2 corner = abs(extent) + extent;\n\n    vec2 csRot = vec2(cos(angle), sin(angle));\n    vec2 extrusion = mat2(csRot, rotatedCw(csRot)) * (corner - anchor);\n\n    TexCoord = (decodeVec2U12(EncTexPos) + corner) * TEXTURE_SCALE;\n    gl_Position.xy += extrusion * gl_Position.w * PixelScale;\n}\n\n\n';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderVertex.OPTIMIZED_SOURCE =
    'vec2 r(vec2 l){return vec2(l.y,-l.x);}const float f=1e-9;varying vec2 a;varying float b;vec2 s(float l){const float m=4096.;const float n=-2048.;return vec2(floor(l)+n,fract(l)*m+n);}vec2 t(float l){const float m=4096.;return vec2(floor(l),fract(l)*m);}vec4 u(vec4 l,vec4 m){vec4 n=l+m;n.xy+=n.zw;n.zw=vec2(0,1);return n;}attribute vec4 g,h;attribute float i,j;uniform vec4 c;uniform mat4 d;uniform vec2 e;const float k=1./256.;void main(){gl_Position=d*u(g,c);vec2 l,m,o,p,q;l=s(i+h.x);m=s(h.y);float n=abs(h.z)+max(0.,sign(h.z))*atan(d[0].y,d[0].x);b=h.w;o=abs(l)+l;p=vec2(cos(n),sin(n));q=mat2(p,r(p))*(o-m);a=(t(j)+o)*k;gl_Position.xy+=q*gl_Position.w*e;}';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PointsRenderShaderVertex.SOURCE = goog.DEBUG ?
    ol.renderer.replay.webgl.geom.PointsRenderShaderVertex.DEBUG_SOURCE :
    ol.renderer.replay.webgl.geom.PointsRenderShaderVertex.OPTIMIZED_SOURCE;
/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 */
ol.renderer.replay.webgl.geom.PointsRenderShader.Locations = function(gl, program) {
  /**
   * @type {WebGLUniformLocation}
   */
  this.Pretranslation = gl.getUniformLocation(
      program, goog.DEBUG ? 'Pretranslation' : 'c');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Transform = gl.getUniformLocation(
      program, goog.DEBUG ? 'Transform' : 'd');
  /**
   * @type {WebGLUniformLocation}
   */
  this.PixelScale = gl.getUniformLocation(
      program, goog.DEBUG ? 'PixelScale' : 'e');
  /**
   * @type {WebGLUniformLocation}
   */
  this.RcpGammaIn = gl.getUniformLocation(
      program, goog.DEBUG ? 'RcpGammaIn' : 'f');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler0 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler0' : 'g');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler1 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler1' : 'h');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler2 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler2' : 'i');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler3 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler3' : 'j');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler4 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler4' : 'k');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler5 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler5' : 'l');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler6 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler6' : 'm');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Sampler7 = gl.getUniformLocation(
      program, goog.DEBUG ? 'Sampler7' : 'n');
  /**
   * @type {number}
   */
  this.Position = gl.getAttribLocation(
      program, goog.DEBUG ? 'Position' : 'g');
  /**
   * @type {number}
   */
  this.Style = gl.getAttribLocation(
      program, goog.DEBUG ? 'Style' : 'h');
  /**
   * @type {number}
   */
  this.AltExtent = gl.getAttribLocation(
      program, goog.DEBUG ? 'AltExtent' : 'i');
  /**
   * @type {number}
   */
  this.EncTexPos = gl.getAttribLocation(
      program, goog.DEBUG ? 'EncTexPos' : 'j');
};
/**
 * Generates a source preamble from the expressions in JSCONST
 * directives.
 * We have the rendering context passed in to allow querying
 * extensions and context attributes.
 *
 * @private
 * @param {WebGLRenderingContext} gl GL.
 * @return {string} Shader source preamble.
 */
ol.renderer.replay.webgl.geom.PointsRenderShader.sourcePreamble_ = function(gl) {
  return ('' +
'\n');
};
