// This file is automatically generated, do not edit
goog.provide('ol.renderer.replay.webgl.geom.PolygonsRenderShader');
goog.require('ol.webgl.shader');
/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @param {WebGLRenderingContext} gl GL.
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment = function(gl) {
  goog.base(this,
    ol.renderer.replay.webgl.geom.PolygonsRenderShader.sourcePreamble_(gl) + ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment.SOURCE);
};
goog.inherits(ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment, ol.webgl.shader.Fragment);
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment.DEBUG_SOURCE =
    '//! NAMESPACE=ol.renderer.replay.webgl.geom.PolygonsRenderShader\n//! CLASS=ol.renderer.replay.webgl.geom.PolygonsRenderShader\n\n//! COMMON\n\nvarying vec4 Color;\n\n\n\n\nvec3 applyGamma(vec3 color, float reciprocalGamma) {\n    return pow(color, vec3(reciprocalGamma));\n}\n\nvec2 rotatedCw(vec2 p) {\n    return vec2(p.y, -p.x);\n}\n\nvec2 rotatedCcw(vec2 p) {\n    return vec2(-p.y, p.x);\n}\n\n// Machine epsilon is at ~0.6*10^-8 for a typical 32 bit ALU.\n// We don\'t the full mantissa but at some point the vector becomes\n// useless and points in a random direction...\nconst float NORM_EPS = 0.00000000001;\n\nvec2 safeNormalized(vec2 v) {\n\n    float frob = dot(v, v);\n    return v * (frob > NORM_EPS ? inversesqrt(frob) : 0.0);\n}\n\nvec2 safeNormalized(vec2 v, vec2 fallback) {\n\n    float frob = dot(v, v);\n    return frob > NORM_EPS ? v * inversesqrt(frob) : fallback;\n}\n\nvec3 projected(vec4 p) {\n    return p.xyz / p.w;\n}\n\nvec3 decodeRGB(float v) {\n\n    const float downshift16 = 1. / 65536.;\n    const float downshift8  = 1. /   256.;\n\n    return vec3(v * downshift16, fract(v * downshift8), fract(v));\n}\n\nvec2 decodeUV(float v) {\n    const float downshift12 = 1. / 4096.;\n\n    return vec2(floor(v) * downshift12, fract(v));\n}\n\nvec2 decodeVec2I12(float v) {\n    const float upshift12 = 4096.;\n    const float offset = -2048.;\n\n    return vec2(floor(v) + offset, fract(v) * upshift12 + offset);\n}\n\nvec2 decodeVec2U12(float v) {\n    const float upshift12 = 4096.;\n\n    return vec2(floor(v), fract(v) * upshift12);\n}\n\nvec4 rteDecode(vec4 highPrecCoord, vec4 highPrecOffset) {\n\n    vec4 v = highPrecCoord + highPrecOffset;\n    v.xy += v.zw;\n    v.zw = vec2(0.0, 1.0);\n    return v;\n}\n\n\n//! FRAGMENT\n\nvoid main(void) {\n\n    gl_FragColor = Color;\n}\n\n';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment.OPTIMIZED_SOURCE =
    'varying vec4 a;const float e=1e-11;void main(){gl_FragColor=a;}';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment.SOURCE = goog.DEBUG ?
    ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment.DEBUG_SOURCE :
    ol.renderer.replay.webgl.geom.PolygonsRenderShaderFragment.OPTIMIZED_SOURCE;
/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @param {WebGLRenderingContext} gl GL.
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex = function(gl) {
  goog.base(this,
    ol.renderer.replay.webgl.geom.PolygonsRenderShader.sourcePreamble_(gl) + ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex.SOURCE);
};
goog.inherits(ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex, ol.webgl.shader.Vertex);
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex.DEBUG_SOURCE =
    '//! NAMESPACE=ol.renderer.replay.webgl.geom.PolygonsRenderShader\n//! CLASS=ol.renderer.replay.webgl.geom.PolygonsRenderShader\n\n//! COMMON\n\nvarying vec4 Color;\n\n\n//! VERTEX\n\n//! INCLUDE common_lib.glsl\n\n\nvec3 applyGamma(vec3 color, float reciprocalGamma) {\n    return pow(color, vec3(reciprocalGamma));\n}\n\nvec2 rotatedCw(vec2 p) {\n    return vec2(p.y, -p.x);\n}\n\nvec2 rotatedCcw(vec2 p) {\n    return vec2(-p.y, p.x);\n}\n\n// Machine epsilon is at ~0.6*10^-8 for a typical 32 bit ALU.\n// We don\'t the full mantissa but at some point the vector becomes\n// useless and points in a random direction...\nconst float NORM_EPS = 0.00000000001;\n\nvec2 safeNormalized(vec2 v) {\n\n    float frob = dot(v, v);\n    return v * (frob > NORM_EPS ? inversesqrt(frob) : 0.0);\n}\n\nvec2 safeNormalized(vec2 v, vec2 fallback) {\n\n    float frob = dot(v, v);\n    return frob > NORM_EPS ? v * inversesqrt(frob) : fallback;\n}\n\nvec3 projected(vec4 p) {\n    return p.xyz / p.w;\n}\n\n//! INCLUDE gpudata_lib.glsl\nvec3 decodeRGB(float v) {\n\n    const float downshift16 = 1. / 65536.;\n    const float downshift8  = 1. /   256.;\n\n    return vec3(v * downshift16, fract(v * downshift8), fract(v));\n}\n\nvec2 decodeUV(float v) {\n    const float downshift12 = 1. / 4096.;\n\n    return vec2(floor(v) * downshift12, fract(v));\n}\n\nvec2 decodeVec2I12(float v) {\n    const float upshift12 = 4096.;\n    const float offset = -2048.;\n\n    return vec2(floor(v) + offset, fract(v) * upshift12 + offset);\n}\n\nvec2 decodeVec2U12(float v) {\n    const float upshift12 = 4096.;\n\n    return vec2(floor(v), fract(v) * upshift12);\n}\n\nvec4 rteDecode(vec4 highPrecCoord, vec4 highPrecOffset) {\n\n    vec4 v = highPrecCoord + highPrecOffset;\n    v.xy += v.zw;\n    v.zw = vec2(0.0, 1.0);\n    return v;\n}\n\n\n\nattribute vec4 Position;\nattribute vec2 Style;\n\nuniform vec4 Pretranslation;\nuniform mat4 Transform;\n\nuniform float RcpGammaIn;\n\nvoid main(void) {\n\n    gl_Position = Transform * rteDecode(Position, Pretranslation);\n\n    Color = vec4(applyGamma(decodeRGB(Style.x), RcpGammaIn), Style.y);\n}\n\n\n';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex.OPTIMIZED_SOURCE =
    'varying vec4 a;vec3 k(vec3 h,float i){return pow(h,vec3(i));}const float e=1e-11;vec3 l(float h){const float i=1./65536.;const float j=1./256.;return vec3(h*i,fract(h*j),fract(h));}vec4 m(vec4 h,vec4 i){vec4 j=h+i;j.xy+=j.zw;j.zw=vec2(0,1);return j;}attribute vec4 f;attribute vec2 g;uniform vec4 b;uniform mat4 c;uniform float d;void main(){gl_Position=c*m(f,b);a=vec4(k(l(g.x),d),g.y);}';
/**
 * @const
 * @type {string}
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex.SOURCE = goog.DEBUG ?
    ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex.DEBUG_SOURCE :
    ol.renderer.replay.webgl.geom.PolygonsRenderShaderVertex.OPTIMIZED_SOURCE;
/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShader.Locations = function(gl, program) {
  /**
   * @type {WebGLUniformLocation}
   */
  this.Pretranslation = gl.getUniformLocation(
      program, goog.DEBUG ? 'Pretranslation' : 'b');
  /**
   * @type {WebGLUniformLocation}
   */
  this.Transform = gl.getUniformLocation(
      program, goog.DEBUG ? 'Transform' : 'c');
  /**
   * @type {WebGLUniformLocation}
   */
  this.RcpGammaIn = gl.getUniformLocation(
      program, goog.DEBUG ? 'RcpGammaIn' : 'd');
  /**
   * @type {number}
   */
  this.Position = gl.getAttribLocation(
      program, goog.DEBUG ? 'Position' : 'f');
  /**
   * @type {number}
   */
  this.Style = gl.getAttribLocation(
      program, goog.DEBUG ? 'Style' : 'g');
};
/**
 * Generates a source preamble from the expressions in JSCONST
 * directives.
 * We have the rendering context passed in to allow querying
 * extensions and context attributes.
 *
 * @private
 * @param {WebGLRenderingContext} gl GL.
 * @return {string} Shader source preamble.
 */
ol.renderer.replay.webgl.geom.PolygonsRenderShader.sourcePreamble_ = function(gl) {
  return ('' +
'\n');
};
