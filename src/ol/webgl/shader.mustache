// This file is automatically generated, do not edit
{{! ...the output, that is - actually, *this* file is the template!}}

goog.provide('{{namespace}}');

goog.require('ol.webgl.shader');
{{#jsRequires}}
goog.require('{{.}}');
{{/jsRequires}}


/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @param {WebGLRenderingContext} gl GL.
 */
{{className}}Fragment = function(gl) {
  goog.base(this,
    {{namespace}}.sourcePreamble_(gl) + {{className}}Fragment.SOURCE);
};
goog.inherits({{className}}Fragment, ol.webgl.shader.Fragment);


/**
 * @const
 * @type {string}
 */
{{className}}Fragment.DEBUG_SOURCE = '{{{getOriginalFragmentSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}Fragment.OPTIMIZED_SOURCE = '{{{getFragmentSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}Fragment.SOURCE = goog.DEBUG ?
    {{className}}Fragment.DEBUG_SOURCE :
    {{className}}Fragment.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @param {WebGLRenderingContext} gl GL.
 */
{{className}}Vertex = function(gl) {
  goog.base(this,
    {{namespace}}.sourcePreamble_(gl) + {{className}}Vertex.SOURCE);
};
goog.inherits({{className}}Vertex, ol.webgl.shader.Vertex);


/**
 * @const
 * @type {string}
 */
{{className}}Vertex.DEBUG_SOURCE = '{{{getOriginalVertexSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}Vertex.OPTIMIZED_SOURCE = '{{{getVertexSource}}}';


/**
 * @const
 * @type {string}
 */
{{className}}Vertex.SOURCE = goog.DEBUG ?
    {{className}}Vertex.DEBUG_SOURCE :
    {{className}}Vertex.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 */
{{namespace}}.Locations = function(gl, program) {
{{#getUniforms}}

  /**
   * @type {WebGLUniformLocation}
   */
  this.{{originalName}} = gl.getUniformLocation(
      program, goog.DEBUG ? '{{originalName}}' : '{{shortName}}');
{{/getUniforms}}
{{#getAttributes}}

  /**
   * @type {number}
   */
  this.{{originalName}} = gl.getAttribLocation(
      program, goog.DEBUG ? '{{originalName}}' : '{{shortName}}');
{{/getAttributes}}
};


/**
 * Generates a source preamble from the expressions in JSCONST
 * directives.
 * We have the rendering context passed in to allow querying
 * extensions and context attributes.
 *
 * @private
 * @param {WebGLRenderingContext} gl GL.
 * @return {string} Shader source preamble.
 */
{{namespace}}.sourcePreamble_ = function(gl) {

  return (
{{#jsConsts}}
      '\n#define ' +
        (goog.DEBUG ? '{{originalName}}' : '{{shortName}}') +
        ' ' + ({{expression}}) +
{{/jsConsts}}
      '\n');
};

